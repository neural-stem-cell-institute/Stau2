#####function to identify transiently carried cargo####
####uses a weighted-t-test to calculate the t-statistic 
####then the bayes factor is calulated from the t-statistic
scorer<-function(df,group,comps,cols,ncores=1){
  require(BayesFactor)
  require(foreach)
  require(doParallel)
  require(weights)
  registerDoParallel(makeCluster(ncores))
  ids<-unique(as.character(df$Entrez.ID))
  if(length(which(is.na(ids)))>=1) {ids<-ids[-(which(is.na(ids)))] }
  adj.bfs<-foreach(b=1:length(comps), .combine='cbind') %do% {
    tstats<-foreach(i=1:length(ids),.combine="c") %dopar% {
      mat2<-df[which(as.character(df$Entrez.ID)==ids[i]),]
      if(dim(mat2)[1]>1){
       wgt<-ecdf(0:max(mat2$Peak.Score))
       wgt<-sapply(mat2$Peak.Score,wgt)+1
      } else {wgt<-2}
      mat1<-mat2[,cols]
      mat1<-mat1[,c(grep(as.character(comps[[b]][1]),colnames(mat1)),
                     grep(as.character(comps[[b]][2]),colnames(mat1)))]
      sub.group<-factor(group[c(grep(as.character(comps[[b]][1]),colnames(mat1)),
                              grep(as.character(comps[[b]][2]),colnames(mat1)))])
      mat3<-mat1[,sub.group==levels(sub.group)[1]]
      mat4<-mat1[,sub.group==levels(sub.group)[2]]
      mat3<-cbind(unlist(mat3),unlist(mat4),rep(wgt,length(wgt)))
      tstat<-weights:::wtd.t.test(mat3[,1],mat3[,2],mat3[,3])$coefficients[1]
    }
    tstats<-replace(tstats,which(is.nan(tstats)),0)
    if(length(which(is.infinite(tstats)))>=1) {
      tstats<-replace(tstats,which(is.infinite(tstats)),max(tstats[-(which(is.infinite(tstats)))]))
    }
    n1<-length(grep(as.character(comps[[b]][1]),colnames(df[,cols])))
    n2<-length(grep(as.character(comps[[b]][2]),colnames(df[,cols])))
  
    bfs<-sapply(tstats,function(x) BayesFactor:::ttest.tstat(x,n1,n2)$bf)
  }
  rownames(adj.bfs)<-ids
  TC.BF<-apply(adj.bfs,1,sum)
  fin.scores<-data.frame(adj.bfs,TC.BF)
  return(fin.scores)
}
  
namer<-function(df){
  x<-unlist(lapply(strsplit(df$category,"GO_"),paster))
  x<-unlist(lapply(strsplit(x,"_"), paster))
  df$category<-x
  return(df)
}

####make a similar function to hyp_plott using ggplot2 to allow some flexibility in display
paster<-function(x) {
  paste(x,collapse=" ")
}


hyp_plot2<-function(df,top=10,main="Top Categories",fills=c("deepskyblue","red4")){
  df <- head(df, top)
  df.1 <- df[, c(7, 2, 5, 3)]
  
  df.2 <- df.1
  df.2$log.fdr <- -log10(df.1$fdr)
  df.2$Contribution <- df.1$set.annotated/df.1$category.annotated * df.2$log.fdr
  df.2$x1 <- df.2$log.fdr - df.2$Contribution
  df.3<-df.2[,c(1,6)]
  df.3$Membership<-rep("Cargo",top)
  df.4<-df.2[,c(1,7)]
  colnames(df.4)<-c("category","Contribution")
  df.4$Membership<-rep("Not Cargo",top)
  df.2<-rbind(df.4,df.3)
  df.2$category<-str_wrap(df.2$category,width=30)
  
  p1<- ggplot(df.2,aes(y = Contribution, x = category)) + theme_bw() + theme(axis.text=element_text(size=10))
  p1<- p1 + geom_col(aes(fill=Membership))+coord_flip()
  p1<- p1 + theme(legend.position="bottom", legend.direction="horizontal") +scale_fill_discrete(name="Percent of Category")
  p1<- p1 + scale_fill_manual(values=fills)
  p1<- p1+ labs(x=element_blank(), y="log(FDR)") + theme(legend.text=element_text(size=10))
  p1<- p1 + labs(title=main) + theme(plot.title=element_text(hjust=0)) +xlab("log(FDR)")
  p1
}

#######load data and make objects for analysis
library(hypeR)
library(org.Mm.eg.db)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(ggpmisc)
library(stringr)


peaks<-data.frame(read.delim("Peak.counts.txt"))
colnames(peaks)<-c("Peak.ID",colnames(peaks)[2:19],"E11.1","E11.2","E11.3","E13.1","E13.2","E13.3",
                   "E15.1","E15.2","E15.3","E17.1","E17.2","E17.3")

group<-c(11,11,11,13,13,13,15,15,15,17,17,17)
comps<-list(c(11,13),c(13,15),c(15,17),c(11,17))
cols<-20:31

msigdb_info <- hypeR:::download_msigdb(species="Mus musculus") 
BIOCARTA <- db_get(msigdb_info, "C2.CP.BIOCARTA")
KEGG     <- db_get(msigdb_info, "C2.CP.KEGG")
REACTOME <- db_get(msigdb_info, "C2.CP.REACTOME")
paths<-c(BIOCARTA, KEGG, REACTOME)
GOBP <- db_get(msigdb_info, "C5.BP")
GOMF <- db_get(msigdb_info, "C5.MF")

SYMBOLS<-unlist(as.list(org.Mm.egSYMBOL))

#####Analyze peak data
#######describe distribution of peaks by feature
distribute.plot<-function(df) {
anno<-as.character(peaks$Annotation)
anno<-replace(anno,grep("TTS",anno),"TTS")
anno<-replace(anno,grep("3' UTR",anno),"3'UTR")
anno<-replace(anno,grep("5' UTR",anno),"5'UTR")
anno<-replace(anno,grep("intron",anno),"intron")
anno<-replace(anno,grep("exon",anno),"exon")
anno<-replace(anno,grep("promoter",anno),"promoter")
anno<-replace(anno,grep("Intergenic",anno),"Intergenic")
peaks$anno<-anno
anno<-as.data.frame(table(anno))
colnames(anno)<-c("Feature","Number")
anno.tb<-tibble(anno)
anno.tb<-tibble(x=1,y=-0.5,tb=list(anno))
anno.pie<-ggplot(anno,aes(x=2,y=Number,fill=Feature)) + geom_col(width=1)
anno.pie<- anno.pie+coord_polar("y",start=90,clip="off")+scale_fill_manual(values=c("black","yellow","darkred","cadetblue1",
                                                                                    "purple3","green4","orange")) + theme_void() + xlim(0.5, 2.5) + geom_table(data=anno.tb,aes(x,y,label=tb),
                                                                                                                                                               vjust=0.35,hjust=.90,colour="dark blue", size=3)

dft<-peaks[-(which(peaks$Anno=="Intergenic")),]
dft<-dft[-grep("promoter",dft$Anno),]



x<-unique(as.character(dft$Entrez.ID))
pks_per_gene<-foreach(i=1:length(x),.combine='c') %dopar% {
  length(which(as.character(dft$Entrez.ID)==x[i]))
}
names(pks_per_gene)<-x
x<-foreach(i=1:22,.combine='c') %dopar% { length(which(pks_per_gene==i))}
x<-data.frame(1:22,x)
colnames(x)<-c("Peaks_gene","Number_genes")

p1<-ggplot(x,(aes(x=Peaks_gene,y=Number_genes))) + geom_bar(sta='identity')
p1<-p1 + labs(y="Number of Genes",x="Peaks per Gene") + ggtitle("Distribution of Peaks per Gene")
p1<-p1 + theme(text = element_text(size=12))



pdf(file="Stau2_peak_plots.pdf",onefile=T,paper="letter",width=7.5,height=10)
anno.pie
p1
dev.off()


score.clean<-scorer(dft,group,comps,cols,ncores=10)
####took about 10 minutes
colnames(score.clean)<-c("e11.vs.13","e13.vs,15","e15.vs.17","e11.vs.17","TC.BF")
test<-score.clean[which(exp(score.clean$TC.BF)>=100),]
t1<-SYMBOLS[rownames(test)]
test<-score.clean[which(exp(score.clean$TC.BF)<100),]
s1<-SYMBOLS[rownames(test)]

t1.path<-hypeR(t1, paths, bg=55487, fdr=0.01)
t1.bp<- hypeR(t1, GOBP, bg=55487, fdr=0.01)
t1.mf<- hypeR(t1, GOMF, bg=55487, fdr=0.01)
t1.path<-namer(t1.path)
t1.bp<-namer(t1.bp)
t1.mf<-namer(t1.mf)


stab.path<-hypeR(s1, paths, bg=55487, fdr=0.01)
stab.bp<- hypeR(s1, GOBP, bg=55487, fdr=0.01)
stab.mf<- hypeR(s1, GOMF, bg=55487, fdr=0.01)
stab.path<-namer(stab.path)
stab.bp<-namer(stab.bp)
stab.mf<-namer(stab.mf)



pdf(file="Stau2_plots.pdf",onefile=T,paper="letter",width=7.5,height=10)
hyp_plot2(t1.path,main="Top Signaling Pathways for Transient Genes")
hyp_plot2(t1.bp,main="Top GO:BP categories for Transient Genes")
hyp_plot2(t1.mf,main="Top GO:MF categories for Transient Genes")
hyp_plot2(stab.path,main="Top Signaling Pathways for Stable Genes")
hyp_plot2(stab.bp, main="Top GO:BP categories for Stable Genes")
hyp_plot2(stab.mf, main="Top GO:MF categories for Stable Genes")
dev.off()


x<-intersect(c(t1,s1),GOMF$"GO_NUCLEIC_ACID_BINDING_TRANSCRIPTION_FACTOR_ACTIVITY")
y<-setdiff(x,t1)
x<-intersect(x,t1)
x<-cbind(x,rep("Transient"))
y<-cbind(y,rep("Stable"))
TF.table<-rbind(x,y)
colnames(TF.table)<-c("Gene","Stability")
write.csv(TF.table,"TF.table.csv")

tablemaker<-function(df,filexp){
  df<-df[,-17]
  df<-df[,-15]
  df<-df[,-14]
  df<-df[,-13]
  df<-df[,-11]
  df<-df[,-9]
  df<-df[,-7]
  write.csv(df,paste(filexp,".csv",sep=""))
}

tablemaker(peaks,"MasterPeaks.cts.csv")

write.csv(stab.path,"Stable.pathways.csv")  
write.csv(stab.bp,"Stable.GOBP.csv")  
write.csv(stab.mf,"Stable.GOMF.csv")  
write.csv(t1.path,"Transient.pathways.csv")  
write.csv(t1.bp,"Transient.GOBP.csv")  
write.csv(t1.mf,"Transient.GOMF.csv")  

x<-data.frame(score.clean,SYMBOLS[rownames(score.clean)])  
colnames(x)<-c(colnames(x)[1:5],"Gene.Symbols")
write.csv(x,"Scores.Table.csv") 
 sessionInfo()
#R version 3.6.0 (2019-04-26)
#latform: x86_64-w64-mingw32/x64 (64-bit)
#Running under: Windows 10 x64 (build 17763)

#Matrix products: default

#locale:
#  [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252
#[4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    

#attached base packages:
# [1] stats4    parallel  stats     graphics  grDevices utils     datasets  methods   base     

#other attached packages:
#  [1] weights_1.0            mice_3.6.0             gdata_2.18.0           Hmisc_4.2-0            Formula_1.2-3         
#[6] survival_2.44-1.1      lattice_0.20-38        reshape2_1.4.3         ggpmisc_0.3.1          stringr_1.4.0         
#[11] ggthemes_4.2.0         ggplot2_3.1.1          dplyr_0.8.1            genefilter_1.66.0      org.Mm.eg.db_3.8.2    
#[16] AnnotationDbi_1.46.0   IRanges_2.18.1         S4Vectors_0.22.0       Biobase_2.44.0         BiocGenerics_0.30.0   
#[21] hypeR_1.00.0           doParallel_1.0.14      iterators_1.0.10       foreach_1.4.4          BayesFactor_0.9.12-4.2
#[26] Matrix_1.2-17          coda_0.19-2           

#loaded via a namespace (and not attached):
#  [1] nlme_3.1-140        bitops_1.0-6        bit64_0.9-7         RColorBrewer_1.1-2  httr_1.4.0          tools_3.6.0        
# [7] backports_1.1.4     R6_2.4.0            DT_0.6              rpart_4.1-15        DBI_1.0.0           lazyeval_0.2.2     
#[13] colorspace_1.4-1    jomo_2.6-9          nnet_7.3-12         withr_2.1.2         tidyselect_0.2.5    gridExtra_2.3      
#[19] bit_1.1-14          compiler_3.6.0      htmlTable_1.13.1    plotly_4.9.0        labeling_0.3        scales_1.0.0       
#[25] checkmate_1.9.3     mvtnorm_1.0-10      pbapply_1.4-0       digest_0.6.19       minqa_1.2.4         foreign_0.8-71     
#[31] base64enc_0.1-3     pkgconfig_2.0.2     htmltools_0.3.6     lme4_1.1-21         htmlwidgets_1.3     rlang_0.3.4        
#[37] rstudioapi_0.10     RSQLite_2.1.1       generics_0.0.2      jsonlite_1.6        gtools_3.8.1        acepack_1.4.1      
#[43] zip_2.0.3           RCurl_1.95-4.12     magrittr_1.5        Rcpp_1.0.2          munsell_0.5.0       stringi_1.4.3      
#[49] MASS_7.3-51.4       plyr_1.8.4          grid_3.6.0          blob_1.1.1          mitml_0.3-7         crayon_1.3.4       
#[55] splines_3.6.0       msigdbr_6.2.1       annotate_1.62.0     knitr_1.23          pillar_1.4.1        boot_1.3-22        
#[61] codetools_0.2-16    pan_1.6             XML_3.98-1.19       glue_1.3.1          latticeExtra_0.6-28 data.table_1.12.2  
#[67] nloptr_1.2.1        MatrixModels_0.4-1  gtable_0.3.0        purrr_0.3.2         tidyr_0.8.3         assertthat_0.2.1   
#[73] xfun_0.7            openxlsx_4.1.0.1    broom_0.5.2         xtable_1.8-4        viridisLite_0.3.0   tibble_2.1.2       
#[79] memoise_1.1.0       cluster_2.0.9 
  

