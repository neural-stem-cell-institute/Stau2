#Figure 3
library(hypeR)
library(org.Mm.eg.db)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(ggpmisc)
library(stringr)
library(biomaRt)
library(GenomicRanges)
library(GenomicFeatures)
library(rtracklayer)
library(Rsamtools)
library(RColorBrewer)
library(GenomicAlignments)
library(foreach)
library(akmedoids)
library(GO.db)

###3A,B #also see https://github.com/neural-stem-cell-institute/Stau2/blob/master/R/Paper_code

#####function to identify dynamic vs stable cargo####
####uses a weighted-t-test to calculate the t-statistic 
####then the bayes factor is calulated from the t-statistic
scorer<-function(df1,group,comps,cols,ncores=1){
  require(BayesFactor)
  require(foreach)
  require(doParallel)
  require(weights)
  registerDoParallel(makeCluster(ncores))
  ids<-unique(as.character(df1$ensembl_ID))
  if(length(which(is.na(ids)))>=1) {ids<-ids[-(which(is.na(ids)))] }
  adj.bfs<-foreach(b=1:length(comps), .combine='cbind') %do% {
    tstats<-foreach(i=1:length(ids),.combine="c") %dopar% {
      mat2<-df1[which(as.character(df1$ensembl_ID)==ids[i]),]
      if(dim(mat2)[1]>1){
        wgt<-ecdf(0:max(mat2$Peak.Score))
        wgt<-sapply(mat2$Peak.Score,wgt)+1
      } else {wgt<-2}
      mat1<-mat2[,cols]
      mat1<-mat1[,c(grep(as.character(comps[[b]][1]),colnames(mat1)),
                    grep(as.character(comps[[b]][2]),colnames(mat1)))]
      sub.group<-factor(group[c(grep(as.character(comps[[b]][1]),colnames(mat1)),
                                grep(as.character(comps[[b]][2]),colnames(mat1)))])
      mat3<-mat1[,sub.group==levels(sub.group)[1]]
      mat4<-mat1[,sub.group==levels(sub.group)[2]]
      mat3<-cbind(unlist(mat3),unlist(mat4),rep(wgt,length(wgt)))
      tstat<-weights:::wtd.t.test(mat3[,1],mat3[,2],mat3[,3])$coefficients[1]
    }
    tstats<-replace(tstats,which(is.nan(tstats)),0)
    if(length(which(is.infinite(tstats)))>=1) {
      tstats<-replace(tstats,which(is.infinite(tstats)),max(tstats[-(which(is.infinite(tstats)))]))
    }
    n1<-length(grep(as.character(comps[[b]][1]),colnames(df1[,cols])))
    n2<-length(grep(as.character(comps[[b]][2]),colnames(df1[,cols])))
    
    bfs<-sapply(tstats,function(x) BayesFactor:::ttest.tstat(x,n1,n2)$bf)
  }
  rownames(adj.bfs)<-ids
  cnames<-foreach(i=1:length(comps),.combine='c') %do%{paste(comps[[i]][1],comps[[i]][2],sep="_vs_")}
  cnames<-c(cnames,"Summed.BF")
  TC.BF<-apply(adj.bfs,1,sum)
  fin.scores<-data.frame(adj.bfs,TC.BF)
  colnames(fin.scores)<-cnames
  return(fin.scores)
}

#' internal function used by function 'namer'
#' @param x 
paster<-function(x) {
  paste(x,collapse=" ")
}

#' Beautify the names of the GO categories for plotting
#' @param df A data.frame generated by hypeR function from the 'hypeR' package
namer<-function(df){
  x<-unlist(lapply(strsplit(df$label,"GO_"),paster))
  x<-unlist(lapply(strsplit(x,"_"), paster))
  df$category<-x
  return(df)
}

#######biomart annotation
mus<-useMart("ensembl", dataset = "mmusculus_gene_ensembl")
z<- getBM(attributes=c("entrezgene_id","mgi_symbol","ensembl_gene_id","ensembl_transcript_id","ensembl_exon_id"),
          uniqueRows = F, mart = mus)
Ex2ensID<-z[,3]
names(Ex2ensID)<-z[,5]
ensID2SYM<-z[,2]
names(ensID2SYM)<-z[,3]
ensID2ent<-z[,1]
names(ensID2ent)<-z[,3]
unique(ensID2SYM)[1:5]
ensID2SYM<-ensID2SYM[-(which(duplicated(names(ensID2SYM))))]
ensID2ent<-ensID2ent[-(which(duplicated(names(ensID2ent))))]

library(BayesFactor)
library(weights)
library(doParallel)
group<-c(11,11,11,13,13,13,15,15,15,17,17,17)
comps<-list(c(11,13),c(13,15),c(15,17),c(11,17))
cols<-8:19

dft<-masterpeaks[-(which(masterpeaks$genome_location=="Intergenic")),]  #masterpeaks is Table S1
scores.1<-scorer(dft,group,comps,cols,ncores=3)
scores<-data.frame(scores.1,ensID2SYM[rownames(scores.1)])
colnames(scores)<-c(colnames(scores.1),"Gene.Name")
#scores table is Table S2

#####Fig. 3a: histogram for scores

p<-ggplot(aes(x=summed.ln(BF)), data=scores)
p<- p+geom_histogram(binwidth=0.5, color="black", fill="gray")
p<-p + scale_x_continuous(breaks=seq(-5,30,1))
p


#3C-F: biological process and pathway enrichment of cargo genes

#download genesets
REACTOME <- msigdb_gsets(species="Mus musculus", category="C2", subcategory="CP:REACTOME")
GOBP <- msigdb_gsets(species="Mus musculus", category="C5", subcategory="BP")


#######pathway and BP enrichment for dynamic genes in STAU2 cargo
dyn<-scores[which(scores$Summed.BF>=4.61),]
t1<-ensID2SYM[rownames(dyn)] #or t1<-dyn$Gene.Name
t1.bp<- hypeR(t1, GOBP, background=55487, fdr=0.01)
t1.path<-hypeR(t1, REACTOME, background=55487, fdr=0.01)

#####pathway and BP enrichment for stable genes in STAU2 cargo
stab<-scores[which(scores$Summed.BF<1.163),]
s1<- ensID2SYM[rownames(stab)] #or s1<-stab$Gene.Name
s1.bp<- hypeR(s1, GOBP, background=55487, fdr=0.01)
s1.path<-hypeR(s1, REACTOME, background=55487, fdr=0.01)


#####pathway and BP enrichment for partially dynamic genes in STAU2 cargo
par.dyn<-scores[which(scores$Summed.BF<4.61 & scores$Summed.BF>=1.163),]
p1<- ensID2SYM[rownames(par.dyn)] #or p1<-par.dyn$Gene.Name
p1.path<-hypeR(p1, REACTOME, background=55487, fdr=0.01)
p1.bp<- hypeR(p1, GOBP, background=55487, fdr=0.01)


write.csv(t1.path$data,"Decisively_Dynamic_pathways.csv")
write.csv(t1.bp$data,"Decisively_Dynamic_GOBP.csv")


write.csv(p1.path$data,"Partially_Dynamic_pathways.csv")
write.csv(p1.bp$data,"Partially_Dynamic_GOBP.csv")


write.csv(s1.path$data,"Stable_pathways.csv")
write.csv(s1.bp$data,"Stable_GOBP.csv")

#plotting bar graphs
pdf(file="Stau2_dyn_stab_plots.pdf",onefile=T,paper="letter",width=7.5,height=10)
hyp_plot2(t1.path,main="Top Signaling Pathways for Dynamic Genes")
hyp_plot2(t1.bp,main="Top GO:BP categories for Dynamic Genes")

hyp_plot2(p1.path,main="Top Signaling Pathways for Partially Dynamic Genes")
hyp_plot2(p1.bp,main="Top GO:BP categories for Partially Dynamic Genes")

hyp_plot2(s1.path,main="Top Signaling Pathways for Stable Genes")
hyp_plot2(s1.bp, main="Top GO:BP categories for Stable Genes")

dev.off()

######Figure 3C,D- plotting treemaps 
gg_color_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}
treemap_hyperGO<-function(enr_df,goterms,res.h=0.8,orgdb="org.Mm.eg.db") {
  require(treemapify)
  require(rrvgo)
  require(LSAfun)
  sizes<-(-(log(enr_df$data$fdr)))
  y<-unlist(substring(enr_df$data$label,4))
  y<-breakdown(y)
  y<-goterms[y]
  z<-which(is.na(y))
  y<-y[-z]
  names(sizes)<-y
  sizes<-sizes[-(which(is.na(names(sizes))))]
  sm<-calculateSimMatrix(y,orgdb=orgdb,ont="BP",method="Rel")
  x<-intersect(y,rownames(sm))
  sizes<-sizes[x]
  o <- rev(order(sizes, na.last = FALSE))
  sm <- sm[o, o]
  cluster <- cutree(hclust(as.dist(1 - sm)), h = res.h)
  clusterRep <- tapply(rownames(sm), cluster, function(x) x[which.max(sizes[x])])
  red<-data.frame(go = rownames(sm), 
                  cluster = cluster, 
                  parent = clusterRep[cluster],
                  parentSimScore = unlist(Map(seq_len(nrow(sm)), 
                                              clusterRep[cluster], f = function(i, j) sm[i,j])), 
                  size = sizes[match(rownames(sm), names(sizes))],
                  term = rrvgo:::getGoTerm(rownames(sm)), 
                  parentTerm = rrvgo:::getGoTerm(clusterRep[cluster]))
  
  ncolors<-gg_color_hue(length(unique(red$parentTerm)))
  mcolors<-red$parentTerm
  for(i in 1:length(ncolors)){
    mcolors[which(mcolors==unique(red$parentTerm)[i])]<-ncolors[i]
  }
  red$mcolors<-mcolors
  
  p<-ggplot(red, aes(area=sizes,subgroup=parentTerm,fill=mcolors))
  p<-p + geom_treemap()
  p<-p + geom_treemap_subgroup_border()
  p<-p + geom_treemap_subgroup_text(place='center',grow=F,alpha=1,min.size=6,reflow=T)
  p<-p + theme(legend.position = "none")
  p
}

#####GOterms 
x <- Term(GOTERM)
goterms<-names(x)
names(goterms)<-x

library(treemapify)
library(rrvgo)
library(LSAfun) 

dyn.treemap<-treemap_hyperGO(t1.bp,goterms)
stab.treemap<-treemap_hyperGO(s1.bp,goterms)

write.csv(table(dyn.treemap$data[["parentTerm"]]), "dynamic_treemap_parent_term_new.csv")
write.csv(dyn.treemap$data, "dynamic_treemap_data.csv")

write.csv(table(stab.treemap$data[["parentTerm"]]), "stab_treemap_parent_term_new.csv")
write.csv(stab.treemap$data, "stable_treemap_data.csv")


######Fig. 3E,F
##### first calculate weighted means from masterpeaks file (peak count data)
masterpeaks <- data.frame (read.csv("MasterPeaks.csv"), as.is=T) #masterpeaks=Table S1
ids<-unique(as.character(masterpeaks$gene_symbol))
if(length(which(is.na(ids)))>=1) {ids<-ids[-(which(is.na(ids)))] }

timepoints<- c(1,2,3,4,5,6,7,8,9,10,11,12)# 1,2,3,etc correspond to E11 replicates E11.1, E11.2, E11.3 and so on
library(foreach)

masterpeaks_wm<-foreach(i=1:length(ids),.combine="rbind") %do% {
  mat2<-masterpeaks[which(as.character(masterpeaks$gene_symbol)==ids[i]),]
  if(dim(mat2)[1]>1){
    wgt<-ecdf(0:max(mat2$Peak.Score)) 
    wgt<-sapply(mat2$Peak.Score,wgt) #apply the wgt from the ecdf function to the peak scores
  } else {wgt<-1}
  mat1<- mat2[,9:20] #dataframe containing E11-E17 gene values/counts
  if(dim(mat2)[1]>1){ 
    weight.mean<-foreach (j=1:12, .combine="c") %do% {
      mat3<- mat1[,which(timepoints==j)]
      sum (wgt*mat3)/sum (wgt) } } else {weight.mean<-foreach (j= 1:12, .combine="c") %do% {
        mat3<- mat1[,which(timepoints==j)]
        weight.mean<- as.numeric(mat3)}}  
  weight.mean
}
rownames (masterpeaks_wm)<- ids
colnames (masterpeaks_wm)<- c("E11.1", "E11.2", "E11.3", "E13.1", "E13.2", "E13.3", "E15.1", "E15.2", "E15.3", 
                              "E17.1", "E17.2", "E17.3")
masterpeaks_wm<- data.frame(masterpeaks_wm)
masterpeaks_wm<-data.frame(setDT(masterpeaks_wm, keep.rownames = "Gene.Name")[])
masterpeaks_wm$E11.mean<- rowMeans(masterpeaks_wm[2:4],)
masterpeaks_wm$E13.mean<- rowMeans(masterpeaks_wm[5:7],)
masterpeaks_wm$E15.mean<- rowMeans(masterpeaks_wm[8:10],)
masterpeaks_wm$E17.mean<- rowMeans(masterpeaks_wm[11:13],)

masterpeaks_wm$max <- apply(masterpeaks_wm[,14:17], 1, max)

scores.2<-scores[!duplicated(scores$Gene.Name),] #check for duplications
masterpeaks_wm_scores<- inner_join(masterpeaks_wm,scores.2, by="Gene.Name")
masterpeaks_wm_dyn<- masterpeaks_wm_scores[which(masterpeaks_wm_scores$Summed.BF>=1.163),]

e11.max<-masterpeaks_wm_dyn[which(masterpeaks_wm_dyn$E11.mean==masterpeaks_wm_dyn$max),] #188
e13.max<-masterpeaks_wm_dyn[which(masterpeaks_wm_dyn$E13.mean==masterpeaks_wm_dyn$max),] #919
e15.max<-masterpeaks_wm_dyn[which(masterpeaks_wm_dyn$E15.mean==masterpeaks_wm_dyn$max),] #1763
e17.max<-masterpeaks_wm_dyn[which(masterpeaks_wm_dyn$E17.mean==masterpeaks_wm_dyn$max),] #1387
e11.e13<- intersect(e11.max$Gene.Name, e13.max$Gene.Name) #3 overlap
e13.e15<- intersect(e13.max$Gene.Name, e15.max$Gene.Name) #8 overlap
e15.e17<- intersect(e15.max$Gene.Name, e17.max$Gene.Name) #3 overlap
e13.e17<- intersect(e13.max$Gene.Name, e17.max$Gene.Name) #0 no overlap

#removed 14 genes with overlapping values between two timepoints

e11.bp<-hypeR(e11.max.2$Gene.Name, GOBP, background=55487, fdr=0.01)
e11.bp.2<- e11.bp$data

e13.bp<-hypeR(e13.max.2$Gene.Name, GOBP, background=55487, fdr=0.01)
e13.bp.2<- e13.bp$data

e15.bp<-hypeR(e15.max.2$Gene.Name, GOBP, background=55487, fdr=0.01)
e15.bp.2<- e15.bp$data

e17.bp<-hypeR(e17.max.2$Gene.Name, GOBP, background=55487, fdr=0.01)
e17.bp.2<- e17.bp$data


e11.treemap<-treemap_hyperGO(e11.bp,goterms)
e13.treemap<- treemap_hyperGO(e13.bp,goterms)
e15.treemap<- treemap_hyperGO(e15.bp,goterms)
e17.treemap<- treemap_hyperGO(e17.bp,goterms)

write.csv(table(e11.treemap$data[["parentTerm"]]), "E11_treemap_parent_term_new.csv")
write.csv(table(e13.treemap$data[["parentTerm"]]), "E13_treemap_parent_term_new.csv")
write.csv(table(e15.treemap$data[["parentTerm"]]), "E15_treemap_parent_term_new.csv")
write.csv(table(e17.treemap$data[["parentTerm"]]), "E17_treemap_parent_term_new.csv")

#make new table with top 10 parent BPs for each timepoint #Table S8E 
parent_bp<- data.frame(read.csv("Parent_BP_10pertimepoint_new.csv"))
#plotting
parent_bp$Pathway<- factor (parent_bp$Pathway, levels=unique(parent_bp$Pathway))
p<-ggplot(parent_bp, aes(y=factor(Timepoint), x=Category, size=percent, color=Timepoint))
p<-p + geom_point()+coord_flip()
p<-p+theme(axis.text.x = element_text(size=8, angle=90,    hjust=1, vjust=0.5))
p

